{
	"info": {
		"_postman_id": "b8dfac82-1400-4bfd-b22d-077377fbcc3f",
		"name": "Swagger Petstore Collection",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11565661"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.id).to.eql(22408871);",
									"  pm.expect(jsonData.name).to.eql(\"karabaş\");",
									"  pm.expect(jsonData.tags[0].id).to.eql(1);",
									"  pm.expect(jsonData.tags[0].name).to.eql(\"kangal\");",
									"  pm.expect(jsonData.category.name).to.eql(\"köpek\");",
									"  pm.expect(jsonData.status).to.eql('available')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"karabaş\",\n    \"photoUrls\": [\n        \"url1\",\n        \"url2\"\n    ],\n    \"id\": 22408871,\n    \"category\": {\n        \"id\": 27710153,\n        \"name\": \"köpek\"\n    },\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"kangal\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"40-60kg\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ea nostrud occaecat reprehenderit\",\n        \"consequat eu dolore\"\n    ],\n    \"id\": 22408871,\n    \"category\": {\n        \"id\": 27710153,\n        \"name\": \"in ipsum enim\"\n    },\n    \"tags\": [\n        {\n            \"id\": -68369270,\n            \"name\": \"veniam reprehenderit\"\n        },\n        {\n            \"id\": -76889784,\n            \"name\": \"anim adipisicing veniam minim\"\n        }\n    ],\n    \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.id).to.eql(22408871);",
									"  pm.expect(jsonData.name).to.eql(\"karabaş\");",
									"  pm.expect(jsonData.tags[0].id).to.eql(1);",
									"  pm.expect(jsonData.tags[0].name).to.eql(\"kangal\");",
									"  pm.expect(jsonData.category.name).to.eql(\"köpek\");",
									"  pm.expect(jsonData.status).to.eql('available')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "22408871",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "8979789078978969",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"doggie\",\n \"photoUrls\": [\n  \"ea nostrud occaecat reprehenderit\",\n  \"consequat eu dolore\"\n ],\n \"id\": 22408871,\n \"category\": {\n  \"id\": 27710153,\n  \"name\": \"in ipsum enim\"\n },\n \"tags\": [\n  {\n   \"id\": -68369270,\n   \"name\": \"veniam reprehenderit\"\n  },\n  {\n   \"id\": -76889784,\n   \"name\": \"anim adipisicing veniam minim\"\n  }\n ],\n \"status\": \"available\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "asdasdsdaasd",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "4047744",
											"description": "(Required) ID of pet to return"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"  pm.expect(jsonData.message).to.eql(\"22408871\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "karabaş",
									"description": "Updated name of the pet"
								},
								{
									"key": "status",
									"value": "available",
									"description": "Updated status of the pet"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "22408871",
									"description": "(Required) ID of pet that needs to be updated"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "proident enim ",
											"description": "Updated name of the pet"
										},
										{
											"key": "status",
											"value": "proident cillum sint",
											"description": "Updated status of the pet"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "4047744",
											"description": "(Required) ID of pet that needs to be updated"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.id).to.eql(45212935);",
									"  pm.expect(jsonData.name).to.eql(\"karabaş\");",
									"  pm.expect(jsonData.tags[0].id).to.eql(1);",
									"  pm.expect(jsonData.tags[0].name).to.eql(\"kangal\");",
									"  pm.expect(jsonData.category.name).to.eql(\"köpek\");",
									"  pm.expect(jsonData.status).to.eql('sold')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"karabaş\",\n    \"photoUrls\": [\n        \"url1\",\n        \"nurl2\"\n    ],\n    \"id\": 45212935,\n    \"category\": {\n        \"id\": 23842807,\n        \"name\": \"köpek\"\n    },\n    \"tags\": [\n        {\n            \"id\": 1,\n            \"name\": \"kangal\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"40-60kg\"\n        }\n    ],\n    \"status\": \"sold\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ea nostrud occaecat reprehenderit\",\n        \"consequat eu dolore\"\n    ],\n    \"id\": 22408871,\n    \"category\": {\n        \"id\": 27710153,\n        \"name\": \"in ipsum enim\"\n    },\n    \"tags\": [\n        {\n            \"id\": -68369270,\n            \"name\": \"veniam reprehenderit\"\n        },\n        {\n            \"id\": -76889784,\n            \"name\": \"anim adipisicing veniam minim\"\n        }\n    ],\n    \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ea nostrud occaecat reprehenderit\",\n        \"consequat eu dolore\"\n    ],\n    \"id\": 22408871,\n    \"category\": {\n        \"id\": 27710153,\n        \"name\": \"in ipsum enim\"\n    },\n    \"tags\": [\n        {\n            \"id\": -68369270,\n            \"name\": \"veniam reprehenderit\"\n        },\n        {\n            \"id\": -76889784,\n            \"name\": \"anim adipisicing veniam minim\"\n        }\n    ],\n    \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Validation exception",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ea nostrud occaecat reprehenderit\",\n        \"consequat eu dolore\"\n    ],\n    \"id\": 22408871,\n    \"category\": {\n        \"id\": 27710153,\n        \"name\": \"in ipsum enim\"\n    },\n    \"tags\": [\n        {\n            \"id\": -68369270,\n            \"name\": \"veniam reprehenderit\"\n        },\n        {\n            \"id\": -76889784,\n            \"name\": \"anim adipisicing veniam minim\"\n        }\n    ],\n    \"status\": \"available\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "uploads an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"additionalMetadata: karabaş\\nFile uploaded to ./karabas.jpeg, 142834 bytes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "karabaş",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"description": "file to upload",
									"type": "file",
									"src": "/Users/uguraltas/Downloads/karabas.jpeg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "45212935",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "quis veniam occaecat ut",
											"description": "Additional data to pass to server",
											"type": "text"
										},
										{
											"key": "file",
											"description": "file to upload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId",
										"uploadImage"
									],
									"variable": [
										{
											"key": "petId",
											"value": "4047744",
											"description": "(Required) ID of pet to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 86956292,\n \"type\": \"sed aute ad ullamco\",\n \"message\": \"sunt eu\"\n}"
						}
					]
				},
				{
					"name": "Finds Pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData[0]).to.have.property('id');",
									"  pm.expect(jsonData[0]).to.have.property('name');",
									"  pm.expect(jsonData[0].tags[0]).to.have.property('id');",
									"  pm.expect(jsonData[0].tags[0]).to.have.property('name');",
									"  pm.expect(jsonData[0].category).to.have.property('name');",
									"  pm.expect(jsonData[0].status).to.eql('available')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								},
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"Excepteur irure qui\",\n   \"fugiat et n\"\n  ],\n  \"id\": -8963133,\n  \"category\": {\n   \"id\": 47222128,\n   \"name\": \"proident deserunt laboris tempor\"\n  },\n  \"tags\": [\n   {\n    \"id\": 32709108,\n    \"name\": \"tempor fugiat sed et nostrud\"\n   },\n   {\n    \"id\": 49273279,\n    \"name\": \"cillum tempor Excepteur adipisicing qui\"\n   }\n  ],\n  \"status\": \"sold\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"id dolore velit\",\n   \"aliquip\"\n  ],\n  \"id\": 20927904,\n  \"category\": {\n   \"id\": 65070731,\n   \"name\": \"Excepteur consectetur \"\n  },\n  \"tags\": [\n   {\n    \"id\": -63946271,\n    \"name\": \"adipisicing dolor Lorem\"\n   },\n   {\n    \"id\": 93909255,\n    \"name\": \"incididunt Excepteur velit\"\n   }\n  ],\n  \"status\": \"available\"\n }\n]"
						},
						{
							"name": "Invalid status value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										},
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Finds Pets by tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData[0].id).to.eql(45212935);",
									"  pm.expect(jsonData[0].name).to.eql(\"karabaş\");",
									"  pm.expect(jsonData[0].tags[0].id).to.eql(1);",
									"  pm.expect(jsonData[0].tags[0].name).to.eql(\"kangal\");",
									"  pm.expect(jsonData[0].category.name).to.eql(\"köpek\");",
									"  pm.expect(jsonData[0].status).to.eql('sold')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByTags?tags=kangal&tags=40-60kg",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "kangal",
									"description": "(Required) Tags to filter by"
								},
								{
									"key": "tags",
									"value": "40-60kg",
									"description": "(Required) Tags to filter by"
								}
							]
						},
						"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=in ipsum&tags=laboris deserunt ut consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "in ipsum"
										},
										{
											"key": "tags",
											"value": "laboris deserunt ut consectetur"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"Excepteur irure qui\",\n   \"fugiat et n\"\n  ],\n  \"id\": -8963133,\n  \"category\": {\n   \"id\": 47222128,\n   \"name\": \"proident deserunt laboris tempor\"\n  },\n  \"tags\": [\n   {\n    \"id\": 32709108,\n    \"name\": \"tempor fugiat sed et nostrud\"\n   },\n   {\n    \"id\": 49273279,\n    \"name\": \"cillum tempor Excepteur adipisicing qui\"\n   }\n  ],\n  \"status\": \"sold\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"id dolore velit\",\n   \"aliquip\"\n  ],\n  \"id\": 20927904,\n  \"category\": {\n   \"id\": 65070731,\n   \"name\": \"Excepteur consectetur \"\n  },\n  \"tags\": [\n   {\n    \"id\": -63946271,\n    \"name\": \"adipisicing dolor Lorem\"\n   },\n   {\n    \"id\": 93909255,\n    \"name\": \"incididunt Excepteur velit\"\n   }\n  ],\n  \"status\": \"available\"\n }\n]"
						},
						{
							"name": "Invalid tag value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=in ipsum&tags=laboris deserunt ut consectetur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "in ipsum"
										},
										{
											"key": "tags",
											"value": "laboris deserunt ut consectetur"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"  pm.expect(jsonData.message).to.eql(\"22408871\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "voluptate aliquip"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "22408871",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "voluptate aliquip"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "4047744",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "voluptate aliquip"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "4047744",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "order",
					"item": [
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.eq(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data controls of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.id).to.eql(123);",
											"  pm.expect(jsonData.petId).to.eql(123);",
											"  pm.expect(jsonData.quantity).to.eql(123);",
											"  pm.expect(jsonData.shipDate).to.eql(\"1968-09-11T22:39:10.973+0000\");",
											"  pm.expect(jsonData.status).to.eql(\"delivered\");",
											"  pm.expect(jsonData.complete).to.eql(false)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 123,\n    \"petId\": 123,\n    \"quantity\": 123,\n    \"shipDate\": \"1968-09-11T22:39:10.973Z\",\n    \"status\": \"delivered\",\n    \"complete\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": -48547741,\n    \"petId\": -39062688,\n    \"quantity\": -9107068,\n    \"shipDate\": \"1968-09-11T22:39:10.973Z\",\n    \"status\": \"delivered\",\n    \"complete\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -48547741,\n \"petId\": -39062688,\n \"quantity\": -9107068,\n \"shipDate\": \"1968-09-11T22:39:10.973Z\",\n \"status\": \"delivered\",\n \"complete\": false\n}"
								},
								{
									"name": "Invalid Order",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": -48547741,\n    \"petId\": -39062688,\n    \"quantity\": -9107068,\n    \"shipDate\": \"1968-09-11T22:39:10.973Z\",\n    \"status\": \"delivered\",\n    \"complete\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Find purchase order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.eq(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data controls of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.id).to.eql(123);",
											"  pm.expect(jsonData.petId).to.eql(123);",
											"  pm.expect(jsonData.quantity).to.eql(123);",
											"  pm.expect(jsonData.shipDate).to.eql(\"1968-09-11T22:39:10.973+0000\");",
											"  pm.expect(jsonData.status).to.eql(\"delivered\");",
											"  pm.expect(jsonData.complete).to.eql(false)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "123",
											"description": "(Required) ID of pet that needs to be fetched"
										}
									]
								},
								"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "8",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -48547741,\n \"petId\": -39062688,\n \"quantity\": -9107068,\n \"shipDate\": \"1968-09-11T22:39:10.973Z\",\n \"status\": \"delivered\",\n \"complete\": false\n}"
								},
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "8",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Order not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "8",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete purchase order by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.eq(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"const jsonData = pm.response.json();",
											"pm.test(\"Test data controls of the response\", () => {",
											"  pm.expect(jsonData).to.be.an(\"object\");",
											"  pm.expect(jsonData.code).to.eql(200);",
											"  pm.expect(jsonData.message).to.eql(\"123\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "123",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								},
								"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "63303276",
													"description": "(Required) ID of the order that needs to be deleted"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Order not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "63303276",
													"description": "(Required) ID of the order that needs to be deleted"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData).to.have.property('sold');",
									"  pm.expect(jsonData).to.have.property('string');",
									"  pm.expect(jsonData).to.have.property('lost');",
									"  pm.expect(jsonData).to.have.property('pending');",
									"  pm.expect(jsonData).to.have.property('available');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"555\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 555,\n    \"username\": \"selcen.mersinli\",\n    \"firstName\": \"selcen\",\n    \"lastName\": \"mersinli\",\n    \"email\": \"selcen.mersinli@test.com\",\n    \"password\": \"12345678\",\n    \"phone\": \"1234567890\",\n    \"userStatus\": 89630800\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -25467740,\n    \"username\": \"Excepteur\",\n    \"firstName\": \"culpa adipisicing et\",\n    \"lastName\": \"Ut deserunt consequat id consectetur\",\n    \"email\": \"aliquip culpa consequat fugiat\",\n    \"password\": \"ad labore\",\n    \"phone\": \"aliqua sit\",\n    \"userStatus\": 89630800\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.id).to.eql(555);",
									"  pm.expect(jsonData.username).to.eql(\"selcen.mersinli\");",
									"  pm.expect(jsonData.firstName).to.eql(\"selcen\");",
									"  pm.expect(jsonData.lastName).to.eql(\"mersinli\");",
									"  pm.expect(jsonData.email).to.eql(\"selcen.mersinli@test.com\");",
									"  pm.expect(jsonData.password).to.eql(\"12345678\");",
									"  pm.expect(jsonData.phone).to.eql(\"1234567890\");",
									"  pm.expect(jsonData.userStatus).to.eql(89630800);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "selcen.mersinli",
									"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": -25467740,\n \"username\": \"Excepteur\",\n \"firstName\": \"culpa adipisicing et\",\n \"lastName\": \"Ut deserunt consequat id consectetur\",\n \"email\": \"aliquip culpa consequat fugiat\",\n \"password\": \"ad labore\",\n \"phone\": \"aliqua sit\",\n \"userStatus\": 89630800\n}"
						},
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"555\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 555,\n    \"username\": \"selcen.mersinli\",\n    \"firstName\": \"selcen\",\n    \"lastName\": \"mersinli\",\n    \"email\": \"selcen.mersinli@test.com\",\n    \"password\": \"12345678\",\n    \"phone\": \"1234567890\",\n    \"userStatus\": 89630800\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "selcen.mersinli",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid user supplied",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -25467740,\n    \"username\": \"Excepteur\",\n    \"firstName\": \"culpa adipisicing et\",\n    \"lastName\": \"Ut deserunt consequat id consectetur\",\n    \"email\": \"aliquip culpa consequat fugiat\",\n    \"password\": \"ad labore\",\n    \"phone\": \"aliqua sit\",\n    \"userStatus\": 89630800\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -25467740,\n    \"username\": \"Excepteur\",\n    \"firstName\": \"culpa adipisicing et\",\n    \"lastName\": \"Ut deserunt consequat id consectetur\",\n    \"email\": \"aliquip culpa consequat fugiat\",\n    \"password\": \"ad labore\",\n    \"phone\": \"aliqua sit\",\n    \"userStatus\": 89630800\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) name that need to be updated"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 555,\n        \"username\": \"selcen.mersinli\",\n        \"firstName\": \"selcen\",\n        \"lastName\": \"mersinli\",\n        \"email\": \"selcen.mersinli@test.com\",\n        \"password\": \"12345678\",\n        \"phone\": \"1234567890\",\n        \"userStatus\": 89630800\n    },\n    {\n        \"id\": 556,\n        \"username\": \"selcen.mersinli2\",\n        \"firstName\": \"selcen\",\n        \"lastName\": \"mersinli\",\n        \"email\": \"selcen.mersinli@test.com\",\n        \"password\": \"12345678\",\n        \"phone\": \"1234567890\",\n        \"userStatus\": 89630800\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": -2557604,\n        \"username\": \"aliquip enim eiusmod\",\n        \"firstName\": \"anim deserunt velit aute\",\n        \"lastName\": \"culpa pariatur ipsum\",\n        \"email\": \"in commodo fugiat ullamc\",\n        \"password\": \"adipisicing tempor cillum minim exercitati\",\n        \"phone\": \"ipsum ut dolore velit\",\n        \"userStatus\": -69369765\n    },\n    {\n        \"id\": 6134361,\n        \"username\": \"pariatur mollit do id\",\n        \"firstName\": \"exercitation Duis elit\",\n        \"lastName\": \"tempor et aliqua sunt labore\",\n        \"email\": \"irure in ullam\",\n        \"password\": \"cupidatat elit\",\n        \"phone\": \"mollit\",\n        \"userStatus\": 33037050\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 555,\n        \"username\": \"selcen.mersinli\",\n        \"firstName\": \"selcen\",\n        \"lastName\": \"mersinli\",\n        \"email\": \"selcen.mersinli@test.com\",\n        \"password\": \"12345678\",\n        \"phone\": \"1234567890\",\n        \"userStatus\": 89630800\n    },\n    {\n        \"id\": 556,\n        \"username\": \"selcen.mersinli2\",\n        \"firstName\": \"selcen\",\n        \"lastName\": \"mersinli\",\n        \"email\": \"selcen.mersinli@test.com\",\n        \"password\": \"12345678\",\n        \"phone\": \"1234567890\",\n        \"userStatus\": 89630800\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": -2557604,\n        \"username\": \"aliquip enim eiusmod\",\n        \"firstName\": \"anim deserunt velit aute\",\n        \"lastName\": \"culpa pariatur ipsum\",\n        \"email\": \"in commodo fugiat ullamc\",\n        \"password\": \"adipisicing tempor cillum minim exercitati\",\n        \"phone\": \"ipsum ut dolore velit\",\n        \"userStatus\": -69369765\n    },\n    {\n        \"id\": 6134361,\n        \"username\": \"pariatur mollit do id\",\n        \"firstName\": \"exercitation Duis elit\",\n        \"lastName\": \"tempor et aliqua sunt labore\",\n        \"email\": \"irure in ullam\",\n        \"password\": \"cupidatat elit\",\n        \"phone\": \"mollit\",\n        \"userStatus\": 33037050\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.contains(\"logged in user session\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=selcen.mersinli&password=12345678",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "selcen.mersinli",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "12345678",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=voluptate aliquip&password=voluptate aliquip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "voluptate aliquip"
										},
										{
											"key": "password",
											"value": "voluptate aliquip"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Rate-Limit",
									"value": "4047744",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "X-Expires-After",
									"value": "1955-12-11T04:52:16.119Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"voluptate aliquip\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=voluptate aliquip&password=voluptate aliquip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "voluptate aliquip"
										},
										{
											"key": "password",
											"value": "voluptate aliquip"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.eq(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.test(\"Test data controls of the response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"  pm.expect(jsonData.message).to.eql(\"selcen.mersinli\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "selcen.mersinli"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "voluptate aliquip",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}